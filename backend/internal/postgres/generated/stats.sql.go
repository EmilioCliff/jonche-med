// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: stats.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getStats = `-- name: GetStats :one
SELECT id, total_products, total_low_stock, total_out_of_stock, total_stocks_added, total_stocks_removed, total_users, total_value FROM stats
WHERE id = 1
`

func (q *Queries) GetStats(ctx context.Context) (Stat, error) {
	row := q.db.QueryRow(ctx, getStats)
	var i Stat
	err := row.Scan(
		&i.ID,
		&i.TotalProducts,
		&i.TotalLowStock,
		&i.TotalOutOfStock,
		&i.TotalStocksAdded,
		&i.TotalStocksRemoved,
		&i.TotalUsers,
		&i.TotalValue,
	)
	return i, err
}

const updateStats = `-- name: UpdateStats :one
UPDATE stats
SET total_users = coalesce($1, total_users),
    total_products = coalesce($2, total_products),
    total_low_stock = coalesce($3, total_low_stock),
    total_out_of_stock = coalesce($4, total_out_of_stock),
    total_stocks_added = coalesce($5, total_stocks_added),
    total_stocks_removed = coalesce($6, total_stocks_removed),
    total_value = coalesce($7, total_value)
WHERE id = $8
RETURNING id, total_products, total_low_stock, total_out_of_stock, total_stocks_added, total_stocks_removed, total_users, total_value
`

type UpdateStatsParams struct {
	TotalUsers         pgtype.Int4    `json:"total_users"`
	TotalProducts      pgtype.Int4    `json:"total_products"`
	TotalLowStock      pgtype.Int4    `json:"total_low_stock"`
	TotalOutOfStock    pgtype.Int4    `json:"total_out_of_stock"`
	TotalStocksAdded   pgtype.Int4    `json:"total_stocks_added"`
	TotalStocksRemoved pgtype.Int4    `json:"total_stocks_removed"`
	TotalValue         pgtype.Numeric `json:"total_value"`
	ID                 int32          `json:"id"`
}

func (q *Queries) UpdateStats(ctx context.Context, arg UpdateStatsParams) (Stat, error) {
	row := q.db.QueryRow(ctx, updateStats,
		arg.TotalUsers,
		arg.TotalProducts,
		arg.TotalLowStock,
		arg.TotalOutOfStock,
		arg.TotalStocksAdded,
		arg.TotalStocksRemoved,
		arg.TotalValue,
		arg.ID,
	)
	var i Stat
	err := row.Scan(
		&i.ID,
		&i.TotalProducts,
		&i.TotalLowStock,
		&i.TotalOutOfStock,
		&i.TotalStocksAdded,
		&i.TotalStocksRemoved,
		&i.TotalUsers,
		&i.TotalValue,
	)
	return i, err
}
