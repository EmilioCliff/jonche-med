// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: products.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addStock = `-- name: AddStock :one
UPDATE products
SET stock = stock + $1
WHERE id = $2
RETURNING id, name, description, price, stock, category, unit, low_stock_threshold, deleted, created_at
`

type AddStockParams struct {
	Quantity int64 `json:"quantity"`
	ID       int64 `json:"id"`
}

func (q *Queries) AddStock(ctx context.Context, arg AddStockParams) (Product, error) {
	row := q.db.QueryRow(ctx, addStock, arg.Quantity, arg.ID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.Category,
		&i.Unit,
		&i.LowStockThreshold,
		&i.Deleted,
		&i.CreatedAt,
	)
	return i, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, description, price, stock, category, unit, low_stock_threshold)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, name, description, price, stock, category, unit, low_stock_threshold, deleted, created_at
`

type CreateProductParams struct {
	Name              string         `json:"name"`
	Description       pgtype.Text    `json:"description"`
	Price             pgtype.Numeric `json:"price"`
	Stock             int64          `json:"stock"`
	Category          string         `json:"category"`
	Unit              string         `json:"unit"`
	LowStockThreshold int32          `json:"low_stock_threshold"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Stock,
		arg.Category,
		arg.Unit,
		arg.LowStockThreshold,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.Category,
		&i.Unit,
		&i.LowStockThreshold,
		&i.Deleted,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
UPDATE products
SET deleted = true
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, description, price, stock, category, unit, low_stock_threshold, deleted, created_at FROM products WHERE id = $1 AND deleted = false
`

func (q *Queries) GetProductByID(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.Category,
		&i.Unit,
		&i.LowStockThreshold,
		&i.Deleted,
		&i.CreatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, description, price, stock, category, unit, low_stock_threshold, deleted, created_at FROM products
WHERE 
    (
        COALESCE($1, '') = '' 
        OR LOWER(name) LIKE $1
        OR LOWER(description) LIKE $1
        OR LOWER(category) LIKE $1
    )
    AND (
        $2::boolean IS NULL
        OR (
            CASE 
                WHEN $2::boolean = TRUE THEN stock > low_stock_threshold
                WHEN $2::boolean = FALSE THEN stock <= low_stock_threshold
                ELSE TRUE
            END
        )
    )
    AND deleted = false
ORDER BY created_at DESC
LIMIT $4 OFFSET $3
`

type ListProductsParams struct {
	Search  interface{} `json:"search"`
	InStock pgtype.Bool `json:"in_stock"`
	Offset  int32       `json:"offset"`
	Limit   int32       `json:"limit"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts,
		arg.Search,
		arg.InStock,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Stock,
			&i.Category,
			&i.Unit,
			&i.LowStockThreshold,
			&i.Deleted,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsCount = `-- name: ListProductsCount :one
SELECT COUNT(*) AS total_products
FROM products
WHERE
    (
        COALESCE($1, '') = '' 
        OR LOWER(name) LIKE $1
        OR LOWER(description) LIKE $1
        OR LOWER(category) LIKE $1
    )
    AND (
        $2::boolean IS NULL
        OR (
            CASE 
                WHEN $2::boolean = TRUE THEN stock > low_stock_threshold
                WHEN $2::boolean = FALSE THEN stock <= low_stock_threshold
                ELSE TRUE
            END
        )
    )
    AND deleted = false
`

type ListProductsCountParams struct {
	Search  interface{} `json:"search"`
	InStock pgtype.Bool `json:"in_stock"`
}

func (q *Queries) ListProductsCount(ctx context.Context, arg ListProductsCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, listProductsCount, arg.Search, arg.InStock)
	var total_products int64
	err := row.Scan(&total_products)
	return total_products, err
}

const removeStock = `-- name: RemoveStock :one
UPDATE products
SET stock = stock - $1
WHERE id = $2
RETURNING id, name, description, price, stock, category, unit, low_stock_threshold, deleted, created_at
`

type RemoveStockParams struct {
	Quantity int64 `json:"quantity"`
	ID       int64 `json:"id"`
}

func (q *Queries) RemoveStock(ctx context.Context, arg RemoveStockParams) (Product, error) {
	row := q.db.QueryRow(ctx, removeStock, arg.Quantity, arg.ID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.Category,
		&i.Unit,
		&i.LowStockThreshold,
		&i.Deleted,
		&i.CreatedAt,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET name = coalesce($1, name),
    description = coalesce($2, description),
    price = coalesce($3, price),
    category = coalesce($4, category),
    unit = coalesce($5, unit),
    low_stock_threshold = coalesce($6, low_stock_threshold)
WHERE id = $7
RETURNING id, name, description, price, stock, category, unit, low_stock_threshold, deleted, created_at
`

type UpdateProductParams struct {
	Name              pgtype.Text    `json:"name"`
	Description       pgtype.Text    `json:"description"`
	Price             pgtype.Numeric `json:"price"`
	Category          pgtype.Text    `json:"category"`
	Unit              pgtype.Text    `json:"unit"`
	LowStockThreshold pgtype.Int4    `json:"low_stock_threshold"`
	ID                int64          `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Category,
		arg.Unit,
		arg.LowStockThreshold,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.Category,
		&i.Unit,
		&i.LowStockThreshold,
		&i.Deleted,
		&i.CreatedAt,
	)
	return i, err
}
