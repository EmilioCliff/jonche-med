// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: movements.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMovement = `-- name: CreateMovement :one
INSERT INTO movements (product_id, quantity, price, type, note, performed_by)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, product_id, quantity, price, type, note, performed_by, created_at
`

type CreateMovementParams struct {
	ProductID   int64          `json:"product_id"`
	Quantity    int32          `json:"quantity"`
	Price       pgtype.Numeric `json:"price"`
	Type        string         `json:"type"`
	Note        pgtype.Text    `json:"note"`
	PerformedBy int64          `json:"performed_by"`
}

func (q *Queries) CreateMovement(ctx context.Context, arg CreateMovementParams) (Movement, error) {
	row := q.db.QueryRow(ctx, createMovement,
		arg.ProductID,
		arg.Quantity,
		arg.Price,
		arg.Type,
		arg.Note,
		arg.PerformedBy,
	)
	var i Movement
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
		&i.Type,
		&i.Note,
		&i.PerformedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getMovementByID = `-- name: GetMovementByID :one
SELECT id, product_id, quantity, price, type, note, performed_by, created_at FROM movements WHERE id = $1
`

func (q *Queries) GetMovementByID(ctx context.Context, id int64) (Movement, error) {
	row := q.db.QueryRow(ctx, getMovementByID, id)
	var i Movement
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
		&i.Type,
		&i.Note,
		&i.PerformedBy,
		&i.CreatedAt,
	)
	return i, err
}

const listMovements = `-- name: ListMovements :many
SELECT id, product_id, quantity, price, type, note, performed_by, created_at FROM movements
WHERE 
    (
        $1::bigint IS NULL 
        OR product_id = $1
    )
    AND (
        $2::text IS NULL 
        OR type = $2
    )
    AND (
        $3::timestamptz IS NULL
        OR created_at BETWEEN $3::timestamptz AND COALESCE($4::timestamptz, now())
    )
ORDER BY created_at DESC
LIMIT $6 OFFSET $5
`

type ListMovementsParams struct {
	ProductID pgtype.Int8        `json:"product_id"`
	Type      pgtype.Text        `json:"type"`
	StartDate pgtype.Timestamptz `json:"start_date"`
	EndDate   pgtype.Timestamptz `json:"end_date"`
	Offset    int32              `json:"offset"`
	Limit     int32              `json:"limit"`
}

func (q *Queries) ListMovements(ctx context.Context, arg ListMovementsParams) ([]Movement, error) {
	rows, err := q.db.Query(ctx, listMovements,
		arg.ProductID,
		arg.Type,
		arg.StartDate,
		arg.EndDate,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Movement{}
	for rows.Next() {
		var i Movement
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Quantity,
			&i.Price,
			&i.Type,
			&i.Note,
			&i.PerformedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
